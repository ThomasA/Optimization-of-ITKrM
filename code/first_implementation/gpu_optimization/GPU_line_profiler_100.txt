Timer unit: 1e-06 s

Total time: 20.8742 s
File: /home/niels/GitHub/DLPC/code/first_implementation/gpu_optimization/GPU_ITKrM_optimization_naive.py
Function: itkrm at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    29         1          3.0      3.0      0.0      M, N = data.shape
    30         1         61.0     61.0      0.0      if startD.all()==1:
    31         1       1707.0   1707.0      0.0          D_init = np.random.randn(M, K)
    32                                               else:
    33                                                   D_init = startD
    34                                                   
    35                                               #Algorithm    
    36         1      10445.0  10445.0      0.1      GPU_D_old = cp.asarray(D_init)
    37                                                  
    38         1        192.0    192.0      0.0      GPU_Y = cp.asarray(data)
    39                                               
    40         1     124072.0 124072.0      0.6      GPU_M = int(cp.asarray(M))
    41                                               
    42         1        104.0    104.0      0.0      GPU_N = int(cp.asarray(N))
    43                                               
    44         1         67.0     67.0      0.0      GPU_S = int(cp.asarray(S))
    45                                               
    46         1         63.0     63.0      0.0      GPU_maxitr = int(cp.asarray(maxitr))
    47                                               
    48         1        236.0    236.0      0.0      GPU_I_D = cp.zeros((S,N),dtype=cp.int32)
    49                                               
    50        21         25.0      1.2      0.0      for i in range(GPU_maxitr):
    51        20        142.0      7.1      0.0          start_time = N_timer.cont_timer(0,0)
    52        20        538.0     26.9      0.0          N_timer.Timer(i,maxitr)
    53      8020      10859.0      1.4      0.1          for n in range(GPU_N):
    54      8000    2630746.0    328.8     12.6              GPU_I_D[:,n] = max_atoms(GPU_D_old,GPU_Y[:,n],GPU_S)
    55                                           
    56        20        426.0     21.3      0.0          GPU_D_new = cp.zeros((M,K))
    57                                                   
    58        20       2518.0    125.9      0.0          GPU_DtD = GPU_D_old.T @ GPU_D_old
    59                                           
    60      8020      11744.0      1.5      0.1          for n in range(GPU_N):
    61      8000    1830114.0    228.8      8.8              GPU_DtY = GPU_D_old[:,GPU_I_D[:,n]].T @ GPU_Y[:,n]
    62      8000    7438928.0    929.9     35.6              GPU_matproj = cp.repeat((GPU_D_old[:,GPU_I_D[:,n]] @ cp.linalg.inv(GPU_DtD[GPU_I_D[:,n,None], GPU_I_D[:,n]]) @ GPU_DtY)[:,None],GPU_S,axis=1)
    63      8000    5541899.0    692.7     26.5              GPU_vecproj = GPU_D_old[:,GPU_I_D[:,n]] @ cp.diag(cp.diag( GPU_DtD[GPU_I_D[:,n,None], GPU_I_D[:,n]] )**-1*( GPU_DtY ))
    64      8000     270757.0     33.8      1.3              GPU_signer = cp.sign( GPU_DtY )
    65      8000    2403796.0    300.5     11.5              GPU_D_new[:,GPU_I_D[:,n]] = GPU_D_new[:,GPU_I_D[:,n]] + (cp.repeat(GPU_Y[:,n,None], S, axis=1) - GPU_matproj + GPU_vecproj)*GPU_signer
    66                                                       
    67                                                       
    68                                           
    69                                           
    70        20       2625.0    131.2      0.0          GPU_scale = cp.sum(GPU_D_new*GPU_D_new, axis=0)
    71        20       6952.0    347.6      0.0          GPU_iszero = cp.where(GPU_scale < 0.00001)[0]
    72                                           #        GPU_D_new[:,GPU_iszero] = np.random.randn(GPU_M, len(GPU_iszero))  # generate random with GPU
    73        20       8680.0    434.0      0.0          GPU_D_new[:,GPU_iszero] = cp.asarray(np.random.randn(M, len(GPU_iszero)))  # generate random with CPU
    74        20     574585.0  28729.2      2.8          GPU_D_new = normalize_mat_col(GPU_D_new)
    75        20       1646.0     82.3      0.0          GPU_D_old = 1*GPU_D_new
    76         1        223.0    223.0      0.0      return cp.asnumpy(GPU_D_old)

