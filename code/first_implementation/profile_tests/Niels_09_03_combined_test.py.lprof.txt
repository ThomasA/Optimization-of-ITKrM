Timer unit: 4.10256e-07 s

Total time: 59.7641 s
File: C:\Users\Niels\Documents\GitHub\DLPC\code\first_implementation\Niels_ITKrM.py
Function: itkrm at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           @profile
    34                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    35                                           
    36         1            8      8.0      0.0      M, N = data.shape
    37         1           82     82.0      0.0      if startD.all()==1:
    38         1         3541   3541.0      0.0          D_init = np.random.randn(M, K)
    39                                               else:
    40                                                   D_init=startD
    41         1            6      6.0      0.0      Y = data
    42         1           31     31.0      0.0      I_D=np.zeros((S,N), dtype=np.int32)
    43                                           
    44                                               #Algorithm
    45         1            2      2.0      0.0      D_old=D_init
    46        21           59      2.8      0.0      for i in range(maxitr):
    47        20         4019    200.9      0.0          N_timer.Timer(i,maxitr)
    48       820         2017      2.5      0.0          for n in range(N):
    49       800        77758     97.2      0.1              I_D[:,n]=max_atoms(D_old,Y[:,n],S)
    50        20         1999    100.0      0.0          D_new=np.zeros((M,K))
    51      4020         6642      1.7      0.0          for k in range(K):
    52    164000       378721      2.3      0.3              for n in range(N):
    53    160000     77032354    481.5     52.9                  matproj=proj(D_old[:,I_D[:,n]])@Y[:,n]
    54    160000     52584346    328.7     36.1                  vecproj=proj(D_old[:,k])@Y[:,n]
    55    160000      3522023     22.0      2.4                  signer=np.sign(D_old[:,k].T@Y[:,n])
    56    160000      5554090     34.7      3.8                  indicator=np.any(I_D[:,n]==k)
    57    160000      6274296     39.2      4.3                  D_new[:,k]=D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer*indicator
    58                                               #hugget fra Karin
    59        20         3983    199.2      0.0          scale = np.sum(D_new*D_new, axis=0)
    60        20          422     21.1      0.0          iszero = np.where(scale < 0.00001)[0]
    61        20        58389   2919.4      0.0          D_new[:,iszero] = np.random.randn(M, len(iszero))
    62                                               #end hugget
    63                                           
    64        20       168656   8432.8      0.1          D_new = normalize_mat_col(D_new)
    65        20         1583     79.2      0.0          D_old = 1*D_new
    66         1            3      3.0      0.0      return D_old

