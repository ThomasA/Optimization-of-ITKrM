np.random.seed(0)

K = 200         # Number of columns in D (Atoms)
S = 4           # Number of used vectors (Sparsity). Amount that is NOT zero.
maxit = 20
N = 1024        #Length of training examples, length of Y

pic_number = 0

#data = np.load('grayScale32x32cars.npy')

data = LoadFromDataBatch.ImportData(7, 1)
    # Parameters:
    #     picType: Positive integer between [0:10]. -1 returns all pictures.
    #     batchNumber: Positive integer between [1:5]

data=data[:10,:]  # A reduction in the set size, to test less optimal ITKrM routines without waiting hours

W_data = 32    # Width in pixels
H_data = 32    # Height in pixels
N_subpic = 16     # Width/Height in pixels of smaller square extracted from image.

e = 30

smallSet = ImportImages.ExtractSmall(data.T, W_data, H_data, N_subpic)
print("ITKrM")
dictionary = Niels_ITKrM.itkrm(smallSet,K,S,maxit)
print("\nOMP")
x_sparse = OMP_amalie.OMP(dictionary, smallSet[:,:N], e, S)




Total time: 71.6202 s
File: C:\Users\Niels\Documents\GitHub\DLPC\code\first_implementation\Niels_ITKrM.py
Function: itkrm at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           @profile
    34                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    35
    36         1           10     10.0      0.0      M, N = data.shape
    37         1          108    108.0      0.0      if startD.all()==1:
    38         1         4296   4296.0      0.0          D_init = np.random.randn(M, K)
    39                                               else:
    40                                                   D_init=startD
    41         1            6      6.0      0.0      Y = data
    42         1           49     49.0      0.0      I_D=np.zeros((S,N), dtype=np.int32)
    43
    44                                               #Algorithm
    45         1            2      2.0      0.0      D_old=D_init
    46        21          141      6.7      0.0      for i in range(maxitr):
    47        20        75906   3795.3      0.0          N_timer.Timer(i,maxitr)
    48                                           #        print('Iteration: {}'.format(i+1))
    49       820         2164      2.6      0.0          for n in range(N):
    50       800        87557    109.4      0.1              I_D[:,n]=max_atoms(D_old,Y[:,n],S)
    51        20         3199    159.9      0.0          D_new=np.zeros((M,K))
    52      4020         7188      1.8      0.0          for k in range(K):
    53                                           #            print(k)
    54    164000       426506      2.6      0.2              for n in range(N):
    55    160000     92690125    579.3     53.1                  matproj=proj(D_old[:,I_D[:,n]])@Y[:,n]
    56    160000     62603743    391.3     35.9                  vecproj=proj(D_old[:,k])@Y[:,n]
    57    160000      4163856     26.0      2.4                  signer=np.sign(Y[:,n].T@Y[:,n])
    58    160000      6701169     41.9      3.8                  indicator=np.any(I_D[:,n]==k)
    59                                               #            print(matproj)
    60                                               #            print(vecproj)
    61                                               #            print(signer)
    62                                               #            print(indicator)
    63    160000      7566035     47.3      4.3                  D_new[:,k]=D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer*indicator
    64                                               #            print(D_new[:,k])
    65
    66                                               #hugget fra Karin
    67        20         7583    379.1      0.0          scale = np.sum(D_new*D_new, axis=0)
    68        20          664     33.2      0.0          iszero = np.where(scale < 0.00001)[0]
    69        20        62978   3148.9      0.0          D_new[:,iszero] = np.random.randn(M, len(iszero))
    70                                               #end hugget
    71
    72        20       171139   8557.0      0.1          D_old=normalize_mat_col(D_new)
    73         1            2      2.0      0.0      return D_old