np.random.seed(0)

K = 200         # Number of columns in D (Atoms)
S = 4           # Number of used vectors (Sparsity). Amount that is NOT zero.
maxit = 20
N = 1024        #Length of training examples, length of Y

pic_number = 0

#data = np.load('grayScale32x32cars.npy')

data = LoadFromDataBatch.ImportData(7, 1)
    # Parameters:
    #     picType: Positive integer between [0:10]. -1 returns all pictures.
    #     batchNumber: Positive integer between [1:5]

data=data[:10,:]  # A reduction in the set size, to test less optimal ITKrM routines without waiting hours

W_data = 32    # Width in pixels
H_data = 32    # Height in pixels
N_subpic = 16     # Width/Height in pixels of smaller square extracted from image.

e = 30

smallSet = ImportImages.ExtractSmall(data.T, W_data, H_data, N_subpic)
print("ITKrM")
dictionary = Niels_ITKrM.itkrm(smallSet,K,S,maxit)
print("\nOMP")
x_sparse = OMP_amalie.OMP(dictionary, smallSet[:,:N], e, S)




Total time: 3.14614 s
File: C:\Users\Niels\Documents\GitHub\DLPC\code\first_implementation\Niels_ITKrM_optimized.py
Function: itkrm at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           @profile
    34                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    35
    36         1           11     11.0      0.0      M, N = data.shape
    37         1          108    108.0      0.0      if startD.all()==1:
    38         1         3398   3398.0      0.0          D_init = np.random.randn(M, K)
    39                                               else:
    40                                                   D_init=startD
    41         1            3      3.0      0.0      Y = data
    42         1           27     27.0      0.0      I_D=np.zeros((S,N), dtype=np.int32)
    43
    44                                               #Algorithm
    45         1            2      2.0      0.0      D_old=D_init
    46         1        29621  29621.0      0.4      signer=Y.T@Y
    47        21          168      8.0      0.0      for i in range(maxitr):
    48        20         4352    217.6      0.1          N_timer.Timer(i,maxitr)
    49                                           #        print('Iteration: {}'.format(i+1))
    50       820         2053      2.5      0.0          for n in range(N):
    51       800        51553     64.4      0.7              I_D[:,n]=max_atoms(D_old,Y[:,n],S)
    52        20         3203    160.2      0.0          D_new=np.zeros((M,K))
    53      4020         6714      1.7      0.1          for k in range(K):
    54                                           #            print(k)
    55    164000       309060      1.9      4.0              for n in range(N):
    56    160000      2858759     17.9     37.3                  indicator=np.any(I_D[:,n]==k)
    57    160000       930392      5.8     12.1                  if indicator==1:
    58      3200      1845378    576.7     24.1                      matproj=proj(D_old[:,I_D[:,n]])@Y[:,n]
    59      3200      1224507    382.7     16.0                      vecproj=proj(D_old[:,k])@Y[:,n]
    60      3200       157527     49.2      2.1                      D_new[:,k]=D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer[n,n]
    61
    62
    63                                               #hugget fra Karin
    64        20         6676    333.8      0.1          scale = np.sum(D_new*D_new, axis=0)
    65        20          469     23.4      0.0          iszero = np.where(scale < 0.00001)[0]
    66        20        59864   2993.2      0.8          D_new[:,iszero] = np.random.randn(M, len(iszero))
    67                                               #end hugget
    68
    69        20       174883   8744.1      2.3          D_old=normalize_mat_col(D_new)
    70         1            2      2.0      0.0      return D_old