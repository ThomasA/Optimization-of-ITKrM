Timer unit: 3.95061e-07 s

Total time: 4.2589 s
File: C:\Users\Jacob\Documents\Dictionary learning\DLPC\code\first_implementation\sequential_optimization_line_profiler\Iteration2\Niels_ITKrM_optimization.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34         1           10     10.0      0.0      M, N = data.shape
    35         1          355    355.0      0.0      if startD.all()==1:
    36         1         7013   7013.0      0.1          D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init = startD
    39         1            7      7.0      0.0      Y = data
    40         1           69     69.0      0.0      I_D = np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43         1            2      2.0      0.0      D_old = D_init
    44        21           76      3.6      0.0      for i in range(maxitr):
    45        20          343     17.1      0.0          start_time = N_timer.cont_timer(0,0)
    46        20         7522    376.1      0.1          N_timer.Timer(i,maxitr)
    47      3220         8709      2.7      0.1          for n in range(N):
    48      3200       212198     66.3      2.0              I_D[:,n] = max_atoms(D_old,Y[:,n],S)
    49        20         2184    109.2      0.0          D_new = np.zeros((M,K))
    50      3220        11010      3.4      0.1          for n in range(N):
    51      3200      7627509   2383.6     70.8              matproj = np.repeat(np.array([ proj(D_old[:,I_D[:,n]])@Y[:,n] ]).T, S, axis=1)
    52      3200      1110753    347.1     10.3              vecproj = D_old[:,I_D[:,n]] @ np.diag(np.diag(D_old[:,I_D[:,n]].T @ D_old[:,I_D[:,n]] )**-1*(D_old[:,I_D[:,n]].T@Y[:,n]))
    53      3200       169959     53.1      1.6              signer = np.sign(D_old[:,I_D[:,n]].T@Y[:,n])
    54      3200      1410756    440.9     13.1              D_new[:,I_D[:,n]] = D_new[:,I_D[:,n]] + (np.repeat(np.array([Y[:,n]]).T, S, axis=1) - matproj + vecproj)*signer
    55                                           #            for k in I_D[:,n]:
    56                                           #                vecproj = D_old[:,k] * (D_old[:,k].T@D_old[:,k])**-1 * (D_old[:,k].T@Y[:,n])
    57                                           #                signer = np.sign(D_old[:,I_D[:,n]].T@Y[:,n])
    58                                           #                D_new[:,k] = D_new[:,k]+(Y[:,n]-matproj+vecproj[:,m])*signer
    59                                               #hugget fra Karin
    60        20         4077    203.8      0.0          scale = np.sum(D_new*D_new, axis=0)
    61        20          530     26.5      0.0          iszero = np.where(scale < 0.00001)[0]
    62        20        13183    659.1      0.1          D_new[:,iszero] = np.random.randn(M, len(iszero))
    63                                               #end hugget
    64                                           
    65        20       192366   9618.3      1.8          D_new = normalize_mat_col(D_new)
    66        20         1742     87.1      0.0          D_old = 1*D_new
    67                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    68                                           #    N_timer.log("end",open_file=-1)
    69         1            2      2.0      0.0      return D_old

