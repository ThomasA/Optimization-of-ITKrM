Timer unit: 1e-06 s

Total time: 0 s
File: /user/nmunth14/bare_needed_4_itkrm/Niels_ITKrM.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34                                               M, N = data.shape
    35                                               if startD.all()==1:
    36                                                   D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init=startD
    39                                               Y = data
    40                                               I_D=np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43                                               D_old=D_init
    44                                               for i in range(maxitr):
    45                                                   start_time=N_timer.cont_timer(0,0)
    46                                                   N_timer.Timer(i,maxitr)
    47                                                   for n in range(N):
    48                                                       I_D[:,n]=max_atoms(D_old,Y[:,n],S)
    49                                                   D_new=np.zeros((M,K))
    50                                                   for k in range(K):
    51                                                       for n in range(N):
    52                                                           matproj=proj(D_old[:,I_D[:,n]])@Y[:,n]
    53                                                           vecproj=proj(D_old[:,k])@Y[:,n]
    54                                                           signer=np.sign(D_old[:,k].T@Y[:,n])
    55                                                           indicator=np.any(I_D[:,n]==k)
    56                                                           D_new[:,k]=D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer*indicator
    57                                               #hugget fra Karin
    58                                                   scale = np.sum(D_new*D_new, axis=0)
    59                                                   iszero = np.where(scale < 0.00001)[0]
    60                                                   D_new[:,iszero] = np.random.randn(M, len(iszero))
    61                                               #end hugget
    62                                           
    63                                                   D_new = normalize_mat_col(D_new)
    64                                                   D_old = 1*D_new
    65                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    66                                           #    N_timer.log("end",open_file=-1)
    67                                               return D_old

Total time: 6.38175 s
File: /user/nmunth14/bare_needed_4_itkrm/sequential_optimization_line_profiler/Iteration3/Niels_ITKrM_optimization.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34         1            5      5.0      0.0      M, N = data.shape
    35         1           48     48.0      0.0      if startD.all()==1:
    36         1         2955   2955.0      0.0          D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init = startD
    39         1            1      1.0      0.0      Y = data
    40         1           15     15.0      0.0      I_D = np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43         1            1      1.0      0.0      D_old = D_init
    44        21           39      1.9      0.0      for i in range(maxitr):
    45        20          172      8.6      0.0          start_time = N_timer.cont_timer(0,0)
    46        20          374     18.7      0.0          N_timer.Timer(i,maxitr)
    47      8020        13047      1.6      0.2          for n in range(N):
    48      8000       315062     39.4      4.9              I_D[:,n] = max_atoms(D_old,Y[:,n],S)
    49        20         1127     56.4      0.0          D_new = np.zeros((M,K))
    50        20         6956    347.8      0.1          DtD = D_old.T@D_old
    51      8020        18166      2.3      0.3          for n in range(N):
    52      8000       264212     33.0      4.1              DtY = D_old[:,I_D[:,n]].T @ Y[:,n]
    53      8000      2587050    323.4     40.5              matproj = np.repeat(np.array([ D_old[:,I_D[:,n]] @ np.linalg.inv(DtD[I_D[:,n,None], I_D[:,n]]) @ DtY ]).T, S, axis=1)
    54      8000      1099049    137.4     17.2              vecproj = D_old[:,I_D[:,n]] @ np.diag(np.diag( DtD[I_D[:,n,None], I_D[:,n]] )**-1*( DtY ))
    55      8000        48046      6.0      0.8              signer = np.sign( DtY )
    56      8000      1869248    233.7     29.3              D_new[:,I_D[:,n]] = D_new[:,I_D[:,n]] + (np.repeat(Y[:,n,None], S, axis=1) - matproj + vecproj)*signer
    57                                           #            for k in I_D[:,n]:
    58                                           #                vecproj = D_old[:,k] * (D_old[:,k].T@D_old[:,k])**-1 * (D_old[:,k].T@Y[:,n])
    59                                           #                signer = np.sign(D_old[:,I_D[:,n]].T@Y[:,n])
    60                                           #                D_new[:,k] = D_new[:,k]+(Y[:,n]-matproj+vecproj[:,m])*signer
    61                                               #hugget fra Karin
    62        20         2720    136.0      0.0          scale = np.sum(D_new*D_new, axis=0)
    63        20          335     16.8      0.0          iszero = np.where(scale < 0.00001)[0]
    64        20         7018    350.9      0.1          D_new[:,iszero] = np.random.randn(M, len(iszero))
    65                                               #end hugget
    66                                           
    67        20       144706   7235.3      2.3          D_new = normalize_mat_col(D_new)
    68        20         1395     69.8      0.0          D_old = 1*D_new
    69                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    70                                           #    N_timer.log("end",open_file=-1)
    71         1            1      1.0      0.0      return D_old

