Timer unit: 3.95061e-07 s

Total time: 682.812 s
File: C:\Users\Jacob\Documents\Dictionary learning\DLPC\code\first_implementation\Niels_ITKrM.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           #@profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34         1           10     10.0      0.0      M, N = data.shape
    35         1           76     76.0      0.0      if startD.all()==1:
    36         1         4098   4098.0      0.0          D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init=startD
    39         1            3      3.0      0.0      Y = data
    40         1           36     36.0      0.0      I_D=np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43         1            2      2.0      0.0      D_old=D_init
    44        21           74      3.5      0.0      for i in range(maxitr):
    45        20          363     18.1      0.0          start_time=N_timer.cont_timer(0,0)
    46        20         5617    280.9      0.0          N_timer.Timer(i,maxitr)
    47      3220         8546      2.7      0.0          for n in range(N):
    48      3200       201995     63.1      0.0              I_D[:,n]=max_atoms(D_old,Y[:,n],S)
    49        20         2510    125.5      0.0          D_new=np.zeros((M,K))
    50      4020         8308      2.1      0.0          for k in range(K):
    51    644000      1701356      2.6      0.1              for n in range(N):
    52    640000   1391906252   2174.9     80.5                  matproj=proj(D_old[:,I_D[:,n]])@Y[:,n]
    53    640000    250640970    391.6     14.5                  vecproj=proj(D_old[:,k])@Y[:,n]
    54    640000     18612436     29.1      1.1                  signer=np.sign(D_old[:,k].T@Y[:,n])
    55    640000     30542366     47.7      1.8                  indicator=np.any(I_D[:,n]==k)
    56    640000     34522832     53.9      2.0                  D_new[:,k]=D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer*indicator
    57                                               #hugget fra Karin
    58        20         4126    206.3      0.0          scale = np.sum(D_new*D_new, axis=0)
    59        20          450     22.5      0.0          iszero = np.where(scale < 0.00001)[0]
    60        20        13124    656.2      0.0          D_new[:,iszero] = np.random.randn(M, len(iszero))
    61                                               #end hugget
    62                                           
    63        20       195446   9772.3      0.0          D_new = normalize_mat_col(D_new)
    64        20         1876     93.8      0.0          D_old = 1*D_new
    65                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    66                                           #    N_timer.log("end",open_file=-1)
    67         1            2      2.0      0.0      return D_old

