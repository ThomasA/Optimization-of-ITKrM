Timer unit: 3.95061e-07 s

Total time: 21.7142 s
File: C:\Users\Jacob\Documents\Dictionary learning\DLPC\code\first_implementation\sequential_optimization_line_profiler\Iteration1\Niels_ITKrM_optimization.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34         1            8      8.0      0.0      M, N = data.shape
    35         1           73     73.0      0.0      if startD.all()==1:
    36         1         7396   7396.0      0.0          D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init = startD
    39         1            8      8.0      0.0      Y = data
    40         1           69     69.0      0.0      I_D = np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43         1            3      3.0      0.0      D_old = D_init
    44        21           73      3.5      0.0      for i in range(maxitr):
    45        20          356     17.8      0.0          start_time = N_timer.cont_timer(0,0)
    46        20         7111    355.6      0.0          N_timer.Timer(i,maxitr)
    47      3220         8275      2.6      0.0          for n in range(N):
    48      3200       206807     64.6      0.4              I_D[:,n] = max_atoms(D_old,Y[:,n],S)
    49        20         2374    118.7      0.0          D_new = np.zeros((M,K))
    50      3220         6809      2.1      0.0          for n in range(N):
    51      3200      7034930   2198.4     12.8              matproj = proj(D_old[:,I_D[:,n]])@Y[:,n]
    52    131200       440446      3.4      0.8              for k in I_D[:,n]:
    53    128000     39935316    312.0     72.7                  vecproj = proj(D_old[:,k])@Y[:,n]
    54    128000      2832161     22.1      5.2                  signer = np.sign(D_old[:,k].T@Y[:,n])
    55    128000      4269756     33.4      7.8                  D_new[:,k] = D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer
    56                                               #hugget fra Karin
    57        20         4101    205.1      0.0          scale = np.sum(D_new*D_new, axis=0)
    58        20          541     27.1      0.0          iszero = np.where(scale < 0.00001)[0]
    59        20        12782    639.1      0.0          D_new[:,iszero] = np.random.randn(M, len(iszero))
    60                                               #end hugget
    61                                           
    62        20       193177   9658.9      0.4          D_new = normalize_mat_col(D_new)
    63        20         1680     84.0      0.0          D_old = 1*D_new
    64                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    65                                           #    N_timer.log("end",open_file=-1)
    66         1            2      2.0      0.0      return D_old

