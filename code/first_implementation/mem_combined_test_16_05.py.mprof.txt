ITKrM
Iteration 1 of 1
OMP
Iteration 1 of 40Iteration 2 of 40Estimate until done: 0 minutes 0 seconds
Iteration 3 of 40Iteration 4 of 40Iteration 5 of 40Iteration 6 of 40Iteration 7 of 40Iteration 8 of 40Iteration 9 of 40Iteration 10 of 40Iteration 11 of 40Iteration 12 of 40Iteration 13 of 40Iteration 14 of 40Iteration 15 of 40Iteration 16 of 40Iteration 17 of 40Iteration 18 of 40Iteration 19 of 40Iteration 20 of 40Iteration 21 of 40Iteration 22 of 40Iteration 23 of 40Iteration 24 of 40Iteration 25 of 40Iteration 26 of 40Iteration 27 of 40Iteration 28 of 40Iteration 29 of 40Iteration 30 of 40Iteration 31 of 40Iteration 32 of 40Iteration 33 of 40Iteration 34 of 40Iteration 35 of 40Iteration 36 of 40Iteration 37 of 40Iteration 38 of 40Iteration 39 of 40Iteration 40 of 40
sparseness level x:
0 : 4
1 : 4
2 : 4
3 : 4
Average: 4.0
ssim: 0.717663133875
General pixel error (p-value): 0.29016896522182106
ITKrM took: 61.39869427680969 seconds
Filename: C:\Users\sebas\Desktop\DLPC\code\first_implementation\Niels_ITKrM.py

Line #    Mem usage    Increment   Line Contents
================================================
    32  131.082 MiB  131.082 MiB   @profile
    33                             def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34  131.082 MiB    0.000 MiB       M, N = data.shape
    35  131.086 MiB    0.004 MiB       if startD.all()==1:
    36  131.484 MiB    0.398 MiB           D_init = np.random.randn(M, K)
    37                                 else:
    38                                     D_init=startD
    39  131.484 MiB    0.000 MiB       Y = data
    40  131.488 MiB    0.004 MiB       I_D=np.zeros((S,N), dtype=np.int32)
    41                             #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                 #Algorithm
    43  131.488 MiB    0.000 MiB       D_old=D_init
    44  134.426 MiB    0.000 MiB       for i in range(maxitr):
    45  131.488 MiB    0.000 MiB           start_time=N_timer.cont_timer(0,0)
    46  131.488 MiB    0.000 MiB           N_timer.Timer(i,maxitr)
    47  132.398 MiB    0.000 MiB           for n in range(N):
    48  132.398 MiB    0.910 MiB               I_D[:,n]=max_atoms(D_old,Y[:,n],S)
    49  132.789 MiB    0.391 MiB           D_new=np.zeros((M,K))
    50  134.215 MiB    0.000 MiB           for k in range(K):
    51  134.215 MiB    0.000 MiB               for n in range(N):
    52  134.215 MiB    1.355 MiB                   matproj=proj(D_old[:,I_D[:,n]])@Y[:,n]
    53  134.215 MiB    0.051 MiB                   vecproj=proj(D_old[:,k])@Y[:,n]
    54  134.215 MiB    0.004 MiB                   signer=np.sign(D_old[:,k].T@Y[:,n])
    55  134.215 MiB    0.008 MiB                   indicator=np.any(I_D[:,n]==k)
    56  134.215 MiB    0.008 MiB                   D_new[:,k]=D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer*indicator
    57                                 #hugget fra Karin
    58  134.215 MiB    0.000 MiB           scale = np.sum(D_new*D_new, axis=0)
    59  134.219 MiB    0.004 MiB           iszero = np.where(scale < 0.00001)[0]
    60  134.223 MiB    0.004 MiB           D_new[:,iszero] = np.random.randn(M, len(iszero))
    61                                 #end hugget
    62                             
    63  134.426 MiB    0.203 MiB           D_new = normalize_mat_col(D_new)
    64  134.426 MiB    0.000 MiB           D_old = 1*D_new
    65                             #        N_timer.log(N_timer.cont_timer(start_time,1))
    66                             #    N_timer.log("end",open_file=-1)
    67  134.426 MiB    0.000 MiB       return D_old


