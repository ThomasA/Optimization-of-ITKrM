Timer unit: 1e-06 s

Total time: 0 s
File: /home/niels/GitHub/DLPC/code/first_implementation/gpu_optimization/GPU_Niels_ITKrM_optimization.py
Function: itkrm at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    29                                               M, N = data.shape
    30                                               if startD.all()==1:
    31                                                   D_init = np.random.randn(M, K)
    32                                               else:
    33                                                   D_init = startD
    34                                                   
    35                                               #Algorithm    
    36                                               GPU_D_old = cp.asarray(D_init)
    37                                                  
    38                                               GPU_Y = cp.asarray(data)
    39                                               
    40                                               GPU_M = int(cp.asarray(M))
    41                                               
    42                                               GPU_N = int(cp.asarray(N))
    43                                               
    44                                               GPU_S = int(cp.asarray(S))
    45                                               
    46                                               GPU_maxitr = int(cp.asarray(maxitr))
    47                                               
    48                                               GPU_I_D = cp.zeros((S,N),dtype=cp.int32)
    49                                               
    50                                               for i in range(GPU_maxitr):
    51                                                   start_time = N_timer.cont_timer(0,0)
    52                                                   N_timer.Timer(i,maxitr)
    53                                                   for n in range(GPU_N):
    54                                                       GPU_I_D[:,n] = max_atoms(GPU_D_old,GPU_Y[:,n],GPU_S)
    55                                           
    56                                                   GPU_D_new = cp.zeros((M,K))
    57                                                   
    58                                                   GPU_DtD = GPU_D_old.T @ GPU_D_old
    59                                           
    60                                                   for n in range(GPU_N):
    61                                                       GPU_DtY = GPU_D_old[:,GPU_I_D[:,n]].T @ GPU_Y[:,n]
    62                                                       GPU_matproj = cp.repeat((GPU_D_old[:,GPU_I_D[:,n]] @ cp.linalg.inv(GPU_DtD[GPU_I_D[:,n,None], GPU_I_D[:,n]]) @ GPU_DtY)[:,None],GPU_S,axis=1)
    63                                                       GPU_vecproj = GPU_D_old[:,GPU_I_D[:,n]] @ cp.diag(cp.diag( GPU_DtD[GPU_I_D[:,n,None], GPU_I_D[:,n]] )**-1*( GPU_DtY ))
    64                                                       GPU_signer = cp.sign( GPU_DtY )
    65                                                       GPU_D_new[:,GPU_I_D[:,n]] = GPU_D_new[:,GPU_I_D[:,n]] + (cp.repeat(GPU_Y[:,n,None], S, axis=1) - GPU_matproj + GPU_vecproj)*GPU_signer
    66                                                       
    67                                                       
    68                                           
    69                                           
    70                                                   GPU_scale = cp.sum(GPU_D_new*GPU_D_new, axis=0)
    71                                                   GPU_iszero = cp.where(GPU_scale < 0.00001)[0]
    72                                           #        GPU_D_new[:,GPU_iszero] = np.random.randn(GPU_M, len(GPU_iszero))  # generate random with GPU
    73                                                   GPU_D_new[:,GPU_iszero] = cp.asarray(np.random.randn(M, len(GPU_iszero)))  # generate random with CPU
    74                                               #end hugget
    75                                                   GPU_D_new = normalize_mat_col(GPU_D_new)
    76                                                   GPU_D_old = 1*GPU_D_new
    77                                               return cp.asnumpy(GPU_D_old)

Total time: 3.70171 s
File: /home/niels/GitHub/DLPC/code/first_implementation/sequential_optimization_line_profiler/Iteration3/Niels_ITKrM_optimization.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34         1          3.0      3.0      0.0      M, N = data.shape
    35         1         83.0     83.0      0.0      if startD.all()==1:
    36         1       1794.0   1794.0      0.0          D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init = startD
    39         1          1.0      1.0      0.0      Y = data
    40         1         10.0     10.0      0.0      I_D = np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43         1          1.0      1.0      0.0      D_old = D_init
    44        21         23.0      1.1      0.0      for i in range(maxitr):
    45        20        117.0      5.8      0.0          start_time = N_timer.cont_timer(0,0)
    46        20       1587.0     79.3      0.0          N_timer.Timer(i,maxitr)
    47      8020       6877.0      0.9      0.2          for n in range(N):
    48      8000     185917.0     23.2      5.0              I_D[:,n] = max_atoms(D_old,Y[:,n],S)
    49        20        785.0     39.2      0.0          D_new = np.zeros((M,K))
    50        20       4882.0    244.1      0.1          DtD = D_old.T@D_old
    51      8020      10074.0      1.3      0.3          for n in range(N):
    52      8000     230281.0     28.8      6.2              DtY = D_old[:,I_D[:,n]].T @ Y[:,n]
    53      8000    1362069.0    170.3     36.8              matproj = np.repeat(np.array([ D_old[:,I_D[:,n]] @ np.linalg.inv(DtD[I_D[:,n,None], I_D[:,n]]) @ DtY ]).T, S, axis=1)
    54      8000     618550.0     77.3     16.7              vecproj = D_old[:,I_D[:,n]] @ np.diag(np.diag( DtD[I_D[:,n,None], I_D[:,n]] )**-1*( DtY ))
    55      8000      20451.0      2.6      0.6              signer = np.sign( DtY )
    56      8000    1169856.0    146.2     31.6              D_new[:,I_D[:,n]] = D_new[:,I_D[:,n]] + (np.repeat(Y[:,n,None], S, axis=1) - matproj + vecproj)*signer
    57                                           #            for k in I_D[:,n]:
    58                                           #                vecproj = D_old[:,k] * (D_old[:,k].T@D_old[:,k])**-1 * (D_old[:,k].T@Y[:,n])
    59                                           #                signer = np.sign(D_old[:,I_D[:,n]].T@Y[:,n])
    60                                           #                D_new[:,k] = D_new[:,k]+(Y[:,n]-matproj+vecproj[:,m])*signer
    61                                               #hugget fra Karin
    62        20       1657.0     82.8      0.0          scale = np.sum(D_new*D_new, axis=0)
    63        20        220.0     11.0      0.0          iszero = np.where(scale < 0.00001)[0]
    64        20      14011.0    700.5      0.4          D_new[:,iszero] = np.random.randn(M, len(iszero))
    65                                               #end hugget
    66                                           
    67        20      71862.0   3593.1      1.9          D_new = normalize_mat_col(D_new)
    68        20        602.0     30.1      0.0          D_old = 1*D_new
    69                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    70                                           #    N_timer.log("end",open_file=-1)
    71         1          1.0      1.0      0.0      return D_old

