Timer unit: 2.77277e-07 s

Total time: 4.53588 s
File: gpu_itkrm.py
Function: gpu_itkrm at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def gpu_itkrm(data, K, S, maxit):
    22         1         16.0     16.0      0.0      M, N = data.shape
    23         1       5391.0   5391.0      0.0      D_init = np.random.randn(M, K)
    24       201        728.0      3.6      0.0      for i in range(K):
    25       200      16999.0     85.0      0.1          D_init[:,i] = D_init[:,i] / np.linalg.norm(D_init[:,i], 2)
    26         1          3.0      3.0      0.0      Y = data
    27         1        136.0    136.0      0.0      I_D = np.zeros((S, N), dtype=np.int32)
    28         1          3.0      3.0      0.0      D = D_init
    29         1          3.0      3.0      0.0      TpB = 32    # ThreadsPerBlock
    30         1         19.0     19.0      0.0      BpG = math.ceil(N/32)     # BlocksPerGrid
    31        21         96.0      4.6      0.0      for t in range(maxit):
    32        20       7578.0    378.9      0.0          N_timer.Timer(t, maxit)
    33      8020      31456.0      3.9      0.2          for n in range(N):
    34      8000     808689.0    101.1      4.9              I_D[:,n] = np.argpartition(np.abs(D.T@Y[:,n]), -S)[-S:]
    35        20       7645.0    382.2      0.0          D_new = np.zeros((M, K))
    36        20      48044.0   2402.2      0.3          DtD = D.T@D
    37        20      12588.0    629.4      0.1          d_D = D.reshape(-1)*1
    38        20       2615.0    130.8      0.0          d_DtD = DtD.reshape(-1)*1
    39        20       1663.0     83.2      0.0          d_I_D = I_D.reshape(-1)*1
    40        20       1407.0     70.3      0.0          d_DtY = np.zeros(N*S)
    41        20       7451.0    372.6      0.0          d_Y = Y.reshape(-1)*1
    42        20     224736.0  11236.8      1.4          vecproj = np.zeros(N*M*S)
    43        20      38853.0   1942.7      0.2          L = np.zeros(N*S*S)
    44        20      44825.0   2241.2      0.3          U = np.zeros(N*S*S)
    45        20       2316.0    115.8      0.0          z = np.zeros(N*S)
    46        20       1969.0     98.5      0.0          x = np.zeros(N*S)
    47        20       7477.0    373.9      0.0          matproj = np.zeros(M*N)
    48        20    9630902.0 481545.1     58.9          D_kernel2[TpB, BpG](M, N, K, S, d_D, d_DtD, d_I_D, d_DtY, d_Y, vecproj, L, U, z, x, matproj)
    49      8020      37888.0      4.7      0.2          for n in range(N):
    50      8000     425917.0     53.2      2.6              DtY = D[:,I_D[:,n]].T @ Y[:,n]
    51      8000      75873.0      9.5      0.5              signer = np.sign( DtY )
    52      8000    4594224.0    574.3     28.1              D_new[:,I_D[:,n]] = D_new[:,I_D[:,n]] + (np.repeat(Y[:,n,None], S, axis=1) - np.repeat(matproj.reshape(N, M)[n,:,None], S, axis=1) + vecproj.reshape(N,M,S)[n,:,:])*signer
    53                                                   
    54        20       5682.0    284.1      0.0          scale = np.sum(D_new*D_new, axis=0)
    55        20        846.0     42.3      0.0          iszero = np.where(scale < 0.00001)[0]
    56        20      11905.0    595.2      0.1          D_new[:,iszero] = np.random.randn(M, len(iszero))
    57                                           
    58        20     301189.0  15059.5      1.8          D_new = normalize_mat_col(D_new)
    59        20       1516.0     75.8      0.0          D = 1*D_new
    60                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    61                                           #    N_timer.log("end",open_file=-1)
    62         1          4.0      4.0      0.0      return D

