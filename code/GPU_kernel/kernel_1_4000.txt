Timer unit: 2.77277e-07 s

Total time: 20.9684 s
File: gpu_itkrm_2.py
Function: gpu_itkrm at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def gpu_itkrm(data, K, S, maxit):
    22         1         15.0     15.0      0.0      M, N = data.shape
    23         1       5308.0   5308.0      0.0      D_init = np.random.randn(M, K)
    24       201        823.0      4.1      0.0      for i in range(K):
    25       200      19179.0     95.9      0.0          D_init[:,i] = D_init[:,i] / np.linalg.norm(D_init[:,i], 2)
    26         1          3.0      3.0      0.0      Y = data
    27         1         72.0     72.0      0.0      I_D = np.zeros((S, N), dtype=np.int32)
    28         1          4.0      4.0      0.0      D = D_init
    29         1          4.0      4.0      0.0      TpB = 32    # ThreadsPerBlock
    30         1         21.0     21.0      0.0      BpG_N = math.ceil(N/32)     # BlocksPerGrid
    31         1          6.0      6.0      0.0      BpG_M = math.ceil(M/32)
    32                                           
    33                                               # Move training data to device and allocate arrays on device.
    34         1      67078.0  67078.0      0.1      d_Y = cuda.to_device(Y.reshape(-1)*1)
    35         1     137239.0 137239.0      0.2      d_vecproj = cuda.device_array(shape=(N*M*S))
    36         1       5491.0   5491.0      0.0      z = cuda.device_array(shape=(N*S))
    37         1       2195.0   2195.0      0.0      x = cuda.device_array(shape=(N*S))
    38         1       5971.0   5971.0      0.0      d_matproj = cuda.device_array(shape=(M*N))
    39         1       2393.0   2393.0      0.0      d_signer = cuda.device_array(shape=(S*N))
    40                                           
    41        21        103.0      4.9      0.0      for t in range(maxit):
    42        20       7305.0    365.2      0.0          N_timer.Timer(t, maxit)
    43    320020    1236899.0      3.9      1.6          for n in range(N):
    44    320000   30624444.0     95.7     40.5              I_D[:,n] = np.argpartition(np.abs(D.T@Y[:,n]), -S)[-S:]
    45        20       2845.0    142.2      0.0          D_new = np.zeros((M, K))
    46        20      42844.0   2142.2      0.1          DtD = D.T@D
    47                                           
    48        20      57158.0   2857.9      0.1          d_D = cuda.to_device(D.reshape(-1)*1)
    49        20      37833.0   1891.7      0.1          d_DtD = cuda.to_device(DtD.reshape(-1)*1)
    50        20     196345.0   9817.2      0.3          d_I_D = cuda.to_device(I_D.reshape(-1)*1)
    51        20      36043.0   1802.2      0.0          d_Dnew = cuda.to_device(D_new.reshape(-1)*1)
    52                                           
    53        20    4270952.0 213547.6      5.6          k_matvecproj[TpB, BpG_N](d_D, d_DtD, d_I_D, d_Y, d_vecproj, z, x, d_matproj, d_signer)
    54                                                   
    55        20    1848808.0  92440.4      2.4          k_updateD[TpB, BpG_M](d_Dnew, d_I_D, d_Y, d_vecproj, d_matproj, d_signer)
    56        20   36705224.0 1835261.2     48.5          D_new = d_Dnew.copy_to_host()
    57        20        428.0     21.4      0.0          D_new = D_new.reshape(M, K)
    58                                           
    59        20       7222.0    361.1      0.0          scale = np.sum(D_new*D_new, axis=0)
    60        20        872.0     43.6      0.0          iszero = np.where(scale < 0.00001)[0]
    61        20       1562.0     78.1      0.0          D_new[:,iszero] = np.random.randn(M, len(iszero))
    62                                           
    63        20     298265.0  14913.2      0.4          D_new = normalize_mat_col(D_new)
    64        20       1559.0     78.0      0.0          D = 1*D_new
    65         1          4.0      4.0      0.0      return D

