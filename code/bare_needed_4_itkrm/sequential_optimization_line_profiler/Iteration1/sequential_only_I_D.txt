Timer unit: 3.95061e-07 s

Total time: 0.787532 s
File: C:\Users\Jacob\Documents\Dictionary learning\DLPC\code\first_implementation\Niels_ITKrM.py
Function: itkrm at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def itkrm(data,K,S,maxitr,startD=np.array([1])):
    34         1           11     11.0      0.0      M, N = data.shape
    35         1          101    101.0      0.0      if startD.all()==1:
    36         1         6311   6311.0      0.3          D_init = np.random.randn(M, K)
    37                                               else:
    38                                                   D_init = startD
    39         1            9      9.0      0.0      Y = data
    40         1           70     70.0      0.0      I_D = np.zeros((S,N), dtype=np.int32)
    41                                           #    N_timer.log(0,log_s='20 data test, 14/03',open_file=1)
    42                                               #Algorithm
    43         1            5      5.0      0.0      D_old = D_init
    44        21           75      3.6      0.0      for i in range(maxitr):
    45        20          412     20.6      0.0          start_time = N_timer.cont_timer(0,0)
    46        20        10762    538.1      0.5          N_timer.Timer(i,maxitr)
    47       820         2645      3.2      0.1          for n in range(N):
    48       800        65730     82.2      3.3              I_D[:,n] = max_atoms(D_old,Y[:,n],S)
    49        20         2324    116.2      0.1          D_new = np.zeros((M,K))
    50       820         1832      2.2      0.1          for n in range(N):
    51       800       386298    482.9     19.4              matproj = proj(D_old[:,I_D[:,n]])@Y[:,n]
    52      4000        19352      4.8      1.0              for k in I_D[:,n]:
    53      3200      1034864    323.4     51.9                  vecproj = proj(D_old[:,k])@Y[:,n]
    54      3200        74004     23.1      3.7                  signer = np.sign(D_old[:,k].T@Y[:,n])
    55                                           #                indicator = np.any(I_D[:,n]==k)
    56      3200       111829     34.9      5.6                  D_new[:,k] = D_new[:,k]+(Y[:,n]-matproj+vecproj)*signer#*indicator
    57                                               #hugget fra Karin
    58        20         4197    209.8      0.2          scale = np.sum(D_new*D_new, axis=0)
    59        20          546     27.3      0.0          iszero = np.where(scale < 0.00001)[0]
    60        20        69696   3484.8      3.5          D_new[:,iszero] = np.random.randn(M, len(iszero))
    61                                               #end hugget
    62                                           
    63        20       200421  10021.0     10.1          D_new = normalize_mat_col(D_new)
    64        20         1951     97.5      0.1          D_old = 1*D_new
    65                                           #        N_timer.log(N_timer.cont_timer(start_time,1))
    66                                           #    N_timer.log("end",open_file=-1)
    67         1            2      2.0      0.0      return D_old

